{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Stacks, Queues, and Deques
\f1\b0 \
\

\f0\b Stacks\

\f1\b0 -stack: collection of objects that are inserted and removed according to last-in, first-out principles\
-user can insert objects into a stack at any time but can only access or remove the most recently inserted object that remains\
-stack is derived from the stack of cafeteria plates metaphor where you can only grab the top plate\
-simplest and most important data structures\
-two main methods are:\
	1. push() (add to top of stack) \
	2. pop() (remove and return top element from stack)\
-accessor methods:\
	1. s.top(): return a reference to the top element of S without removing that element\
	2. s.is_empty(): return True if stack S does not contain any elements\
	3. len(s): return number of elements in the stack\
\

\f0\b Array-Based Stack Implementation
\f1\b0 \
-implement easily by storing elements in a list\
-could directly use the list class in place of the stack class, but the list class includes behaviors that would track the stack abstraction (e.g. adding or removing elements from any position, not just the last position)\
\

\f0\b The Adapter Pattern
\f1\b0 \
-adapter: design pattern that applies to any context where the goal is modifying an existing class so its methods match those of a related, but different, class or interface\
-can simply adapt python\'92s list class using the following:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2020-03-27 at 2.17.12 PM.png \width7020 \height3040 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\

\f0\b Implementing a Stack Using a Python List\

\f1\b0 -can define a new exception class when adapting the list class to create a stack class to handle errors when the list / stack is empty\
-example code p.233\
-all run times (push, pop, top, len) are O(1) run times\
\

\f0\b Avoiding Amortization by Reserving Capacity
\f1\b0 \
-there may be additional knowledge that suggests a maximum size a stack will reach\
-it is more efficient to construct a list with initial length n than to start with an empty list and append n items\
-as an alternate model, we might want to give a parameter specifying maximum stack capacity / length\
-the size of the stack would no longer be synonymous with the length of the list and the pushes and pops of the stack would not require changing the length of the list\
-recommend maintaining a separate integer as an instance variable denoting the current number of elements in the stack\
\

\f0\b Reversing Data Using a Stack
\f1\b0 \
-because of the last in, first out design, a stack can be used as a general tool to reverse a data sequence\
-if values 1, 2, and 3 are pushed onto a stack in that order, they will be popped in the reverse order of 3, 2, 1\
-the idea of using a stack to reverse a data set can be applied to other types of sequences\
\

\f0\b Matching Parentheses and HTML Tags
\f1\b0 \
-we explore two related applications of stacks, both of which involve testing for pairs of matching delimiters:\
	1. Arithmetic expressions that contain grouping symbols ((), \{\}, [])\
	-each opening symbol must match its corresponding closing symbol\
	2. Validation of markup languages like HTM or XML\
\

\f0\b Queues
\f1\b0 \
-queue: close cousin of the stack, but operates via first in, first out instead\
-real world examples of first in, first out = ticket lines, phone queues\
-two fundamental methods:\
	1. q.enqueue(e): add element to the back of the queue\
	2. q.dequeue(): remove and return the first element from the queue\
\
-supporting methods:\
	1. q.first(): return a reference to the first element in the queue without removing it\
	2. q.is_empty: return True if the queue does not contain any elements\
	3. len(q): return the number of elements in queue\
\
-by default, we assume a newly created queue is empty and there is no bound on the capacity of the queue\
\

\f0\b Array-Based Queue Implementation
\f1\b0 \
-do not recommend creating an adapter class using list like we did for stacks\
-very inefficient because pop(0) always causes the worst-case behavior of O(n) time\
-can improve by avoiding the call to pop(0) entirely\
-replace the dequeued entry in the array with a reference to None and maintain an explicit variable f to store the index of the element that is currently at the front of the queue\
-would run in O(1) time\
-drawback: can build a queue with few elements but the elements are stored in an arbitrarily large list\
-this occurs if a new element is repeatedly enqueued and then another is dequeued (allowing the front to drift rightward)\
-over time, the size of the underlying list would grow to O(m) where m is the total number of enqueue operations since the creation of the queue, rather than the current number of elements in the queue\
-would be bad in applications where the queues are modestly sized but used for long periods of time, like a restaurant wait-list\
\

\f0\b Using an Array Circularly\

\f1\b0 -in developing a more robust implementation, we allow the front to drift rightward and we allow the contents to \'93wrap around\'94 the end of the underlying array\
-we assume the underlying array has a fixed length N that is greater than the actual number of elements in the queue\
-new elements are enqueued toward the \'93end\'94 of the current queue, progressing from the front to index n-1 and continuing at index 0, then 1\
-when implementing, dequeue an element and \'93advance\'94 the front index, use: f = (f + 1) % N\
-e.g. if the front index is 7 and the total length is 10, advance the front by computing (7 + 1) % 10, which is 8\'85and so on (8 + 1) % 10 is 9, etc.\
\

\f0\b A Python Queue Implementation
\f1\b0 \
-p. 243\
-internally, the class maintains three instance variables:\
	1._data: reference to a fixed capacity list\
	2._size: integer representing the current number of elements stored in the queue (like len())\
	3._front: integer representing the index of the first element in _data\
\

\f0\b Adding and Removing Elements
\f1\b0 \
-goal of enqueue is to add a new element to the back of the queue\
-compute the location of the next opening based on the formula:\
	-(self._front + self._size) % len(self._data)\
-**note: use the size of the queue as it exists prior to the addition of the new element\
-two responsibilities of dequeue:\
	1. when dequeue is called, the current value of self._front removes and returns the 	corresponding element value\
	2. Update the value of _front to reflect the removal of the element and promote the former 	second element to be the new first element\
\

\f0\b Resizing the Queue
\f1\b0 \
-when enqueue is called at a time when the size of the queue equals the size of the underlying list, we rely on a standard technique to double the storage capacity of the underlying list\
-steps:\
	1. create a temporary reference to the old list values\
	2. Allocate a new list twice the size\
	3. Copy references from old list to new list\
-while transferring contents, realign the front of the queue with index 0\
\

\f0\b Shrinking the Underlying Array
\f1\b0 \
-ideally space is O(n) where n is the current number of queue elements\
-a robust approach is to reduce the array to half its current size, whenever the number of stored elements is less than 25% of its capacity\
\

\f0\b Analyzing the Array-Based Queue Implementation
\f1\b0 \
-all methods rely on a constant number of statements using arithmetic operations, comparisons, and assignments\
-means each method runs in worst-case O(1) time\
\

\f0\b Double-Ended Queues
\f1\b0 \
-double-ended queue: queue-like data structure supporting insertion and deletion at the front and back of the queue\
-aka deque\
-deque ADTs are more general than stacks and queues\
-methods:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2020-03-30 at 10.11.58 AM.png \width9840 \height3360 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
-accessors:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2020-03-30 at 10.12.21 AM.png \width10260 \height3660 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
-deque class implementations available in the collections module\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}